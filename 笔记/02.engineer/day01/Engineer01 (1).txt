教学环境介绍
开机时优先虚拟机classroom，所有的服务随机自启动

真机：使用rht-vmctl辅助工具
• 控制教学用虚拟机
– 格式:rht-vmctl   控制指令     虚拟机名
– 常用控制指令:
]$ rht-vmctl reset classroom     #先重置资源服务器
]$ rht-vmctl reset server
]$ rht-vmctl reset desktop       #再重置练习虚拟机
#####################################################
Shell脚本基础

  什么是脚本：一个可以执行文件，可以实现某种功能

     人：创建用户tom     计算机：useradd tom

案例：书写以一个hello.sh脚本
[root@server0 ~]# vim /root/hello.sh
echo hello world 

[root@server0 ~]# chmod +x /root/hello.sh
[root@server0 ~]# ls -l /root/hello.sh

[root@server0 ~]# /root/hello.sh
hello world
[root@server0 ~]#


规范Shell脚本的一般组成
• #! 环境声明,声明以下所有的代码有谁进行翻译
• # 注释文本
• 可执行代码

[root@server0 ~]# vim /root/hello.sh     
 #!/bin/bash
 echo hello world 
 cat /etc/redhat-release
 uname -r
 hostname 
 ifconfig | head -2

[root@server0 ~]# /root/hello.sh

#####################################################
重定向输出
     >：只收集前面命令的正确信息
     2>：只收集前面命令的错误信息
     &>：正确与错误都收集

[root@server0 ~]# echo 123 > /opt/1.txt
[root@server0 ~]# cat /opt/1.txt
[root@server0 ~]# cat /opt/1.txt /a

[root@server0 ~]# cat /opt/1.txt /a > /mnt/b.txt
[root@server0 ~]# cat /mnt/b.txt 

[root@server0 ~]# cat /opt/1.txt /a 2> /mnt/b.txt
[root@server0 ~]# cat /mnt/b.txt

[root@server0 ~]# cat /opt/1.txt /a &> /mnt/b.txt
[root@server0 ~]# cat /mnt/b.txt

########################################################
案例：创建用户的脚本

   /dev/null:黑洞设备，专门收集不要的输出信息

[root@server0 ~]# vim /root/user.sh
 #!/bin/bash
 useradd bob  &> /dev/null
 echo 用户bob成功
 echo 123 | passwd --stdin bob  &>  /dev/null
 echo 用户bob密码设置成功

[root@server0 ~]# chmod +x  /root/user.sh
[root@server0 ~]# /root/user.sh

 
为了适应多变的需求与多变环境，所以使用变量         

使用变量:会变化的量    类似于容器   以不变的名称，存储可以变化的值

     变量名=存储的值

[root@server0 ~]# vim /root/user.sh
 #!/bin/bash
 a=tc                            #定义一个变量a储存的值为tc
 useradd  $a  &> /dev/null
 echo  用户$a成功
 echo  123  | passwd  --stdin $a  &>  /dev/null
 echo  用户$a密码设置成功

[root@server0 ~]#  /root/user.sh

降低脚本运行难度,产生交互，获取到用户输入的内容

   read -p  '屏幕输出信息'

             1.产生交互
             2.记录用户在键盘上所有的输入
             3.将用户在键盘上所有的输入，赋值给一个变量储存

[root@server0 ~]# vim /root/user.sh
 #!/bin/bash
 read  -p  '请输入您要创建用户名：'    a
 useradd  $a  &> /dev/null
 echo  用户$a成功
 echo  123 | passwd --stdin  $a  &>  /dev/null
 echo  用户$a密码设置成功

[root@server0 ~]# /root/user.sh

######################################################

• 设置变量时的注意事项
– 若指定的变量名已存在,相当于为此变量重新赋值
– 等号两边不要有空格
– 变量名只能由字母/数字/下划线组成,区分大小写
– 变量名不能以数字开头,不要使用关键字和特殊字符


查看/引用变量
• 基本格式
– 引用变量值:$变量名
– 查看变量值:echo $变量名、echo ${变量名}

[root@server0 ~]# a=rhel
[root@server0 ~]# echo $a

[root@server0 ~]# echo $a7

[root@server0 ~]# echo ${a}7

[root@server0 ~]# a=CentOS

[root@server0 ~]# echo ${a}7

####################################################
补充：
   单引号 '' :  取消所有特殊字符的意义

[root@server0 ~]# echo '*'
*
[root@server0 ~]# echo '* ? | '
* ? | 
[root@server0 ~]# a=10
[root@server0 ~]# echo $a
10
[root@server0 ~]# echo '$a'
$a
[root@server0 ~]# 

######################################################
变量的种类

环境变量: 变量名一般都大写,用来设置用户/系统环境
               由系统定义完成，并且赋值完成

常见的环境变量： 
   USER=存放当前系统登陆的用户名

[root@server0 ~]# echo $USER
root
[root@server0 ~]# su - dc
[dc@server0 ~]$ echo $USER
dc
[dc@server0 ~]$ exit
logout
[root@server0 ~]# su - student
[student@server0 ~]$ echo $USER
student
[student@server0 ~]$ exit
logout
[root@server0 ~]#


   PATH=提供命令程序搜寻的路径

[root@server0 ~]# echo $PATH
/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/root/bin

[root@server0 ~]# vim /opt/hello.sh
echo I Love Dc
[root@server0 ~]# chmod +x /opt/hello.sh
[root@server0 ~]# /opt/hello.sh
I Love Dc
[root@server0 ~]# hello.sh
bash: hello.sh: 未找到命令...

[root@server0 /]# cp /opt/hello.sh /usr/bin/
[root@server0 /]# hello.sh 

######################################################
位置变量:非交互式传递命令行参数

• 在执行脚本时提供的命令行参数
– 表示为 $n,n为序号
– $1、$2、.. .. ${10}、${11}、.. ..

[root@server0 ~]# vim /root/1.sh
#!/bin/bash
echo $1
echo $2
echo $3

[root@server0 ~]# chmod +x /root/1.sh

[root@server0 ~]# /root/1.sh  dc haha xixi

[root@server0 ~]# vim /root/user.sh 
 #!/bin/bash
 #read -p '请输入您要创建用户名：'   a
 useradd  $1   &> /dev/null
 echo 用户$1成功
 echo 123 | passwd --stdin  $1   &>  /dev/null
 echo 用户$1密码设置成功

[root@server0 ~]# /root/user.sh harry
[root@server0 ~]# /root/user.sh natasha

[root@server0 ~]# vim /root/2.sh             
 #!/bin/bash
 cat -n  $1  |  head  -$2

[root@server0 ~]# chmod  +x  /root/2.sh
[root@server0 ~]# /root/2.sh  /etc/passwd  3

#######################################################
预定义变量
• 用来保存脚本程序的执行信息
– 直接使用这些变量
– 不能直接为这些变量赋值

	$# 已加载的位置变量的个数,专门用于判断用户是否输入命令行参数
	$? 程序退出后的状态值,0表示正常,其他值异常
[root@server0 ~]# vim /root/1.sh 
#!/bin/bash
echo $1
echo $2
echo $3
echo $#
[root@server0 ~]# /root/1.sh haha xixi  hehe  lele 

[root@server0 ~]# vim /root/3.sh
#!/bin/bash
echo 您一共输入了$#个参数
[root@server0 ~]# chmod +x /root/3.sh
[root@server0 ~]# /root/3.sh
[root@server0 ~]# /root/3.sh hehe  lele 

#######################################################
条件测试及选择

条件测试
 – [   测试表达式   ]      #每一部分之间都要有空格

常用的测试选项
• 检查文件状态
	-e:数据存在才为真
	-d:数据存在，并且必须为目录才为真
	-f:数据存在，并且必须为文件才为真
[root@server0 ~]# [ -f /etc/passwd ]
[root@server0 ~]# echo $?
0
[root@server0 ~]# [ -d /etc/passwd ]
[root@server0 ~]# echo $?
1
[root@server0 ~]# [ -d /etc ]
[root@server0 ~]# echo $?
0
[root@server0 ~]# [ -e /abc ]
[root@server0 ~]# echo $?
1
[root@server0 ~]#

• 比较整数大小
	-gt:大于
	-ge:大于或等于
	-eq:等于
	-ne:不等于
	-lt:小于
	-le:小于或等于
[root@server0 ~]# [ 1 -eq 1 ]
[root@server0 ~]# echo $?
0
[root@server0 ~]# [ 2 -ge 1 ]
[root@server0 ~]# echo $?
0
[root@server0 ~]# [ 2 -ge 2 ]
[root@server0 ~]# echo $?
0
[root@server0 ~]# [ 2 -gt 2 ]
[root@server0 ~]# echo $?
1

• 字符串比对
	==：两个字符串一致为真                           
	!=：两个字符串不一致为真
   
[root@server0 ~]# [  student ==  haha  ]
[root@server0 ~]# echo $?
1
[root@server0 ~]# [  root == $USER  ]
[root@server0 ~]# echo $?
0
[root@server0 ~]# [  student != haha  ]
[root@server0 ~]# echo $?
0
[root@server0 ~]# 
#######################################################
if选择结构

if双分支处理

	if [条件测试];then
	  命令序列xx
	else
	  命令序列yy
	fi

[root@server0 ~]# vim /root/if01.sh 
 #!/bin/bash
 if  [  $1  -eq  1  ];then
   echo hello
 else
   echo hi
 fi

[root@server0 ~]# /root/if01.sh  1
[root@server0 ~]# /root/if01.sh  2

案例：用户是否输入参数的脚本
[root@server0 ~]# vim /root/if02.sh
#!/bin/bash
if [ $# -eq 0 ];then
  echo 您没有输入参数
else
  echo 您一共输入$#个参数
fi

[root@server0 ~]# chmod +x /root/if02.sh
[root@server0 ~]# /root/if02.sh
[root@server0 ~]# /root/if02.sh haha  xixi

案例：
利用read获取用户输入信息，判断用户输入的用户名
  如果该用户存在，则输出 用户已存在
  如果该用户不存在，则创建该用户，输出 用户创建成功

[root@server0 ~]# vim /root/if03.sh      
 #!/bin/bash
 read  -p  '请输入您要测试的用户名：'   a

 id $a  &> /dev/null
 if  [ $? -eq  0 ];then
   echo 用户$a已存在
 else
   useradd $a &> /dev/null
   echo 用户$a创建成功
 fi 

[root@server0 ~]# chmod +x /root/if03.sh 
[root@server0 ~]# /root/if03.sh 

#######################################################
if多分支处理

	if [条件测试1];then
	   命令序列xx
	elif [条件测试2];then
	   命令序列yy
	elif [条件测试3];then
	   命令序列hh

	else
	   命令序列zz
	fi

案例：利用read获取用户输入的成绩
   如果成绩大于等于90以上，则输出  优秀
   如果成绩大于等于80以上，则输出  良好
   如果成绩大于等于70以上，则输出  一般
   如果成绩大于等于60以上，则输出  合格
   如果以上条件均不满足，则输出 再牛的肖邦，也弹不出哥的悲伤！

[root@server0 ~]# vim /root/if04.sh 
 #!/bin/bash
 read -p  '请输入您的成绩：'    num
 if   [ $num -ge 90 ];then
  echo  优秀
 elif [ $num -ge 80 ];then
  echo  良好
 elif [ $num -ge 70 ];then
  echo  一般
 elif [ $num -ge 60 ];then
  echo  合格
 else
  echo '再牛的肖邦，也弹不出哥的悲伤！'
 fi
[root@server0 ~]# chmod +x /root/if04.sh 
[root@server0 ~]# /root/if04.sh 

######################################################
for循环结构,解决重复性的操作


• 遍历/列表式循环
– 根据变量的不同取值,重复执行xx处理
	for 变量名   in   值列表
	do
		反复执行的代码
	done

[root@server0 ~]# vim  /root/for01.sh
 #!/bin/bash
 for  a  in  zs  ls zq  gq  ff  gg  uu  nb
 do
   useradd  $a  &> /dev/null
   echo  $a创建成功
 done

[root@server0 ~]# chmod +x /root/for01.sh
[root@server0 ~]# /root/for01.sh

 for允许列表值，不参与循环体

  造数工具： {起始点..结束点}        {1..99}:制造出1到99之间连续的数字

[root@server0 ~]# vim /root/for01.sh
 #!/bin/bash
 for a  in  {1..10}
 do
   echo I Love Dc
 done

[root@server0 ~]# /root/for01.sh

#####################################################
案例4:编写一个判断脚本
在 server0 上创建 /root/foo.sh 脚本
1)当运行/root/foo.sh redhat,输出为fedora
2)当运行/root/foo.sh fedora,输出为redhat
3)当没有任何参数或者参数不是 redhat 或者fedora时
其错误输出产生以下信息: 
/root/foo.sh redhat|fedora



####################################################
案例5:编写一个批量添加用户脚本
在 server0 上创建 /root/batchusers 脚本
1)此脚本要求提供用户名列表文件作为参数
2)如果没有提供参数,此脚本应该给出提示 
Usage: /root/batchusers,退出并返回相应值
3)如果提供一个不存在的文件,此脚本应该给出提
示 Input file not found,退出并返回相应值
4)新用户的登录Shell为 /bin/false,无需设置密码
5)用户列表测试文件:
 http://classroom/pub/materials/userlist











