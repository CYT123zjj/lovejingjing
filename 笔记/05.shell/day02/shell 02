回顾
shell 
/bin/bash   历史记录,快捷键,tab键,重定向,管道
规范的shell脚本:
1,声明解释器  #!/bin/bash
2,注释,脚本功能,变量的作用
3,代码
脚本的执行方式:
1,添加x权限
2,调用解释器直接执行   bash  XXX.sh
3,source XXX.sh
变量:
1, 自定义变量    变量名=变量的值
	echo ${a}XXX
	unset a
2,环境变量  USER UID HOME HOSTNAME SHELL PWD PS1 PS2 PATH
3,位置变量与预定义变量
$1 $2 $3.....  $0  $$   $#  $*  $?
变量扩展:
""   ''    
``  $()
read -p "XXX" n
stty -echo     stty echo
export a 发布全局变量
运算:
expr 1 + 1
echo $[1+1]
let a=10+3    let a++   let a*=10
bc
=================================
条件测试,可以让脚本更智能的工具
1,字符串的测试      ==  判断两边的内容是否相等   !=
[ a == a ]   a是否等于a
echo $?			结果是0
[ a == b ]		
echo $?			结果非0
[ root == $USER  ]    我是不是管理员,结果是0
su - abc	切换普通用户之后在测试,结果非0
----------------------------
a=10
b=
[ -n "$a" ]		判断$a是否非空
echo $?
[ -n "$b" ]		判断$b是否非空
echo $?
[ ! -n "$b" ]	上述判断取反,判断$b是否为空
echo $?
[ -z "$a" ]		判断$a是否为空
echo $?
[ -z "$b" ]		判断$b是否为空

4, 逻辑测试    
&&     符号之前的任务成功后,才执行之后的任务
||	符号之前的任务失败后,才执行之后的任务

ls && ls  第一个任务成功了,会继续执行第2个任务, 一共执行两次ls
ls || ls  第一个任务成功了,不会继续执行第2个任务, 一共执行1次ls
[ -z $1 ] && exit  	如果$1为空, 就会执行exit退出脚本
两个逻辑符号:  在ls都执行成功的情况下
ls && ls && ls   执行3次ls
ls && ls || ls   第1次执行,第2次执行,第3次不执行
ls || ls || ls   第1次执行,后面都不执行
ls || ls && ls	 第1次执行,第2次不执行,第3次执行

[ root == $USER ] && echo "我是管理员" || echo "我不是管理员"
-----------------------------------
2,数字的测试
-eq等于   -ne不等于    -gt大于   -ge大于等于    -lt小于   -le小于等于
[ 1 -eq 1 ]  1等于1, echo $? 结果是成功
[ 0 -eq $USER ]  我的id号是否为0,管理员运行的话,结果是成功
----------------------------------
两种不同写法,可以实现相同目的:
[ -z $n ] && echo "你倒是给个名字啊!" && exit
[ -n "$n" ] || echo "你倒是给个名字啊!"
[ -n "$n" ] || exit
----------------------------------
要求,每2分钟检查系统登录账户数量,如果超过3人登录,给管理员发报警邮件

#!/bin/bash
x=`who | wc -l`
[ $x -gt 3 ] && echo "有人入侵服务器!隔壁老王来了!" | mail -s test root

mail 查邮件
crontab -e   
*/2 * * * * /opt/test1.sh

chmod +x test1.sh
-----------------------------------------------------------
 3,文件的测试
-e 是否存在    -f 是否存在且为普通文件   -d 是否存在且为目录
-r   -w   -x  判断当前用户对某文件是否有相关权限

[ -e abc ]  abc是否存在,不关心文件类型
[ -f abc ]  abc是否存在,必须是文件
[ -d abc ]  abc是否存在,必须是目录

[ -r abc ]  当前用户对文件abc是否有读权限,管理员无效
[ -w abc ]  当前用户对文件abc是否有写权限,管理员无效
[ -x abc ]  当前用户对文件abc是否有执行(目录是进入的)权限
================================
==  !=   -z  -n
-eq -ne -gt -ge -lt -le
-e  -f  -d  -r -w -x
&&  ||   ;
---------------------------------------
if判断
种类1:
单分支
if 条件测试 ;then
	执行指令
fi
--------------------------
#!/bin/bash
if [ ! -d /opt/xyz ]  ;then
        mkdir /opt/xyz
        echo 123
fi
----------------------------
双分支
if 条件测试 ;then
	执行指令1
else
	执行指令2		判断当前目录是否有a目录,没有就创建
fi
----------------------------- 		
#!/bin/bash
if [ -f a ] ;then
        rm -rf a
        mkdir a
else
        [ -d a ] || mkdir a
fi
-----------------------------
多分支
if 条件测试1 ;then
	执行指令1
elif 添加测试2 ;then
	执行指令2
else
	执行指令3
fi
============================
ping -c 检测次数  -i 间隔时间(秒)  -W 网络无法通讯时的反馈时间
ping -c 3 -i 0.2 -W 1 172.25.0.13
------------------
#!/bin/bash
read -p "请输入ip地址" ip
ping -c 3 -i 0.2 -W 1 $ip &> /dev/null
if [ $? -eq 0 ] ;then
        echo "通了!"
else
        echo "不通!"
fi
--------------------------------------
#!/bin/bash
x=$[RANDOM%10]
read -p "请输入一个数字(0-9)" n
if [ $x -eq $n ] ;then
        echo "猜中了!"
elif [ $n -lt $x ] ;then
        echo "猜小了"
else
        echo "猜大了"
fi

========================
循环 
for循环  有次数限制  可以关注循环次数或者变量
for 变量名 in 值1 值2 值3......
do
	执行指令
done
------------------------------------
#!/bin/bash
for i in {1..10}   循环10次,此方式不支持变量比如{1..$a}
do
        echo 123
        echo $i
done
-----------------------------------
#!/bin/bash
a=10
for i in `seq $a`  使用变量循环10次
do
        echo 123
        echo $i
done

-------------------------------------
172.25.0.1~172.25.0.15


#!/bin/bash
for i in {1..15}
do
        ping -c 3 -i 0.2 -W 1 172.25.0.$i &> /dev/null
        if [ $? -eq 0 ] ;then
                echo "172.25.0.$i 通了"
        else
                echo "172.25.0.$i 不通"
        fi
done
------------------------------------------
#!/bin/bash
x=0
y=0
for i in {1..15}
do
        ping -c 3 -i 0.2 -W 1 172.25.0.$i &> /dev/null
        if [ $? -eq 0 ] ;then
                echo "172.25.0.$i 通了"
                let x++
        else
                echo "172.25.0.$i 不通"
                let y++
        fi
done
echo "$x台通了,$y台不通"
-----------------------------------------------------------------------
























