shell   翻译官
shell脚本    工具,提高工作效率
命令 交互式  
脚本 非交互式
cat /etc/shells   查看拥有的解释器
yum -y install ksh   安装新解释器
bash优点  历史命令,快捷键,tab键,重定向,管道
--------------------------------
脚本的格式:
1,声明解释器类型
#!/bin/bash
2,注释,说明该脚本的作用,变量的含义等
# XXXX
3,编写代码
写完后,赋予脚本执行权限 chmod +x test1.sh
---------------------------------------------
执行脚本的方法:
1, ./test1.sh   使用绝对路径或者相对路径执行脚本 ,需要x权限
2, bash test1.sh     调用另外一个bash执行脚本,开启子进程
3, source test1.sh	  使用当前解释器执行脚本,不开启子进程
----------------------
#!/bin/bash
mkdir /opt/abc
cd /opt/abc
----------------------
#!/bin/bash
echo 123
sleep 1000
---------------------------------
#!/bin/bash
#部署yum软件仓库
rm -rf /etc/yum.repos.d/*.repo
echo "[abc]
name=abc
baseurl=http://172.25.254.254/content/rhel7.0/x86_64/dvd/
enabled=1
gpgcheck=0" >  /etc/yum.repos.d/abc.repo
---------------------------------
#!/bin/bash
#部署vsftpd服务
yum -y install vsftpd  &> /dev/null
systemctl restart vsftpd
systemctl enable vsftpd
==============================
常量  固定不变
变量  灵活多变,增加灵活,增加功能
--------------------------------------
变量的种类
1,自定义变量
	变量名称=变量的值	  名称必须是字母数字下划线,不能以数字开头,不能使用特殊符号
a=10   定义变量
echo $a    查看变量的值
echo ${a}RMB   输出变量+常量,大括号用来界定容易混淆的名称
unset a    取消变量
echo $a	   再次查看
--------------------------------------
2,环境变量,系统自带
USER当前用户名   UID当前用户的id号   HOME当前用户的家目录   PWD当前位置   SHELL当前用户使用的解释器   HOSTNAME主机名
PS1一级提示符    PS2二级提示符    PATH存放命令的路径
-----------------
echo $PS1   显示一级提示符
[\u@\h \W]\$   
PS1=dachui   修改
PS1='[\u@\h \W]\$'   还原
----------------
3,位置变量与预定义变量
$1 $2  $3  .....
$0脚本名  $$进程号   $#位置变量的个数    $*所有的位置变量   $?上一条指令的结果,0是成功, 非0是失败
-----------
#!/bin/bash
echo $1
echo $2
echo $3
echo $0
echo $$
echo $#
echo $*
echo $?
--------------------
env 查看所有环境变量
set	查看所有变量
------------------------------
编写脚本,创建用户test01,配置密码123456
初版:
#!/bin/bash
useradd test01
echo 123456 | passwd --stdin test01
改良版:
#!/bin/bash
useradd $1
echo $2 | passwd --stdin $1                  

-----------------------
变量的扩展应用
""  界定范围
''   界定范围,屏蔽特殊符号

touch "a b"   创建一个带空格文件
touch 'x y'	  创建一个带空格文件
a=10
echo "$a"	显示变量a中的值
echo '$a'	显示$a

``  反撇号, 可以获取命令的执行结果
a=ls    变量a的值是ls
a=`ls`  变量a的值是ls执行的结果
a=$(ls)  变量a的值是ls执行的结果
-------------------
#!/bin/bash
read -p "请输入用户名" n
useradd $n
read -p "请输入密码" p
echo $p | passwd --stdin $n
-----------------------
stty -echo  屏蔽回显
stty echo  恢复回显
-----------------------
#!/bin/bash
read -p "请输入用户名" n
useradd $n
stty -echo
read -p "请输入密码" p
stty echo
echo $p | passwd --stdin $n
--------------------------------------
a=100 通常创建的变量是局部变量 ,只在某个解释器中生效
export 发布全局变量,使任何解释器(子进程中均可使用)

a=100
export a  将a发布为全局变量
export b=200  创建并发布全局变量
bash   进入新解释器(子进程)
echo $a   可以使用之前发布的变量
echo $b
exit  返回
export -n b  取消变量b的全局状态,恢复为局部变量
===============================
shell中的运算
方法一:
expr 1 + 1		加
expr 2 - 1		减
expr 2 \* 2		乘	\ 转义符号 ,可以屏蔽之后1个字符的特殊含义
expr 4 / 2		除
expr 4 % 2		求模(取余数)
a=10
b=20
expr $a + $b
expr $a + 10
expr $a + $a
------------------------------------------
方法二:
echo $[1+1]
echo $[2-1]
echo $[2*2]
echo $[2/2]
echo $[2%2]
echo $[a+b]
echo $[a+20]
-------------------------------------
方法三:   let 运算结果不显示, 通常用于变量创建或者变量自增减
-----------------------
let a=5+5  创建变量a
-----------------------
变量自增减
主流写法:
let a--		相当于 let a=a-1
let a++		相当于 let a=a+1
let a+=2	相当于 let a=a+2
let a-=2	相当于 let a=a-2
let a/=5	相当于 let a=a/5
let a*=4	相当于 let a=a*4
let a%=4	相当于 let a=a%4
------------------------
bc 计算器 ,可以小数运算
echo "scale=3;10/3" | bc






































